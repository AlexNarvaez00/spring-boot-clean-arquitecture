package mx.edu.itoaxaca.api.v1.{{name}}.infrastructure.controllers;

import java.util.HashMap;
import mx.edu.itoaxaca.Routes;
import mx.edu.itoaxaca.api.v1.{{name}}.domain.{{Name}}Mother;
import mx.edu.itoaxaca.api.v1.{{name}}.domain.{{Name}}Repository;
import mx.edu.itoaxaca.api.v1.shared.infrastructure.RestClientTest;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;

@WebMvcTest({{Name}}Controller.class)
public class {{Name}}ControllerTes extends RestClientTest<{{Name}}Repository>{
    @Test
    void testDestroy() throws Exception {
        var {{name}} = {{Name}}Mother.random(true);
        Mockito.when(this.getRepo().find{{Name}}ById({{name}}.getId())).thenReturn(
            {{name}}
        );
        var url = Routes.API_V1_{{name}}_BASE + "/" + {{name}}.getId().toString();
        this.delete(url).andExpect(
                MockMvcResultMatchers.status().isNoContent()
            );
    }

    @Test
    void testIndex() throws Exception {
        this.get(Routes.API_V1_{{name}}_BASE).andExpect(
                MockMvcResultMatchers.status().isOk()
            );
    }

    @Test
    void testShow() throws Exception {
        var {{name}} = {{Name}}Mother.random(true);
        Mockito.when(this.getRepo().find{{Name}}ById({{name}}.getId())).thenReturn(
            {{name}}
        );

        var url = Routes.API_V1_{{name}}_BASE + "/" + {{name}}.getId().toString();

        this.get(url).andExpect(MockMvcResultMatchers.status().isOk());
    }

    @Test
    void testStore() throws Exception {
        var {{name}} = {{Name}}Mother.random(true);
        var request = new HashMap<String, String>();

        this.post(Routes.API_V1_{{name}}_BASE, request).andExpect(
                MockMvcResultMatchers.status().isOk()
            );
    }

    @Test
    void testUpdate() throws Exception {
        var {{name}} = {{Name}}Mother.random(true);
        var {{name}}Update = {{Name}}Mother.random(true);

        var request = new HashMap<String, String>();

        Mockito.when(this.getRepo().find{{Name}}ById({{name}}.getId())).thenReturn(
            {{name}}Update
        );

        var url = Routes.API_V1_{{name}}_BASE + "/" + {{name}}.getId().toString();
        this.put(url, request).andExpect(MockMvcResultMatchers.status().isOk());
    }
}
